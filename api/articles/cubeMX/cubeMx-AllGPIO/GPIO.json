{"title":"CM中GPIO的配置，使用，以及启动方法","uid":"d4fbf5902e3d36a3dfddb88b82a353a3","slug":"cubeMX/cubeMx-AllGPIO/GPIO","date":"2022-01-27T10:49:36.000Z","updated":"2022-02-08T15:35:50.168Z","comments":true,"path":"api/articles/cubeMX/cubeMx-AllGPIO/GPIO.json","keywords":null,"cover":"https://s2.loli.net/2022/01/27/EDjA1HNqsKOLrx7.jpg","content":"<h1 id=\"1-配置-GPIO\"><a href=\"#1-配置-GPIO\" class=\"headerlink\" title=\"1.配置 GPIO\"></a><strong>1.配置 GPIO</strong></h1><p>配置 GPI O大概是 CubeMX 中最最简单的一个模块的配置的，大概没有比这个更加简单的模块了，如果有那就是基本库。</p>\n<p>但是，简单归简单，坑依旧是不见少到哪里去，配置之后找问题还是一样的自闭。</p>\n<p>比方说你要定义一个 GPIO 的 LED 灯，以 STM32F427VIT6 为例，例如说 PE9 为对应我们所需要使用的 LED 灯。</p>\n<p><img src=\"/post/cubeMX/cubeMx-AllGPIO/GPIO/Untitled.png\" alt=\"Untitled.png\"></p>\n<p>选中 PE9 引口之后单击会出现一个对应的窗口，里面可以配置对应的 GPIO 的各种各样的属性和性能，这些性能你在别的配置中也可能会用到，不过不是说你要每一个引口都记下（那是不可能的），你需要的只是知道你要配置的时候需要什么步骤即可。</p>\n<p>选择 GPIO_Output 模式，众所周知 LED 都是高低电平的输出决定它的灭亮，所以必然是输出模式。</p>\n<p>选择时候引口的名字会变成这个样子：</p>\n<p><img src=\"/post/cubeMX/cubeMx-AllGPIO/GPIO/Untitled%201.png\" alt=\"Untitled%201.png\"></p>\n<p>这个时候我们还可以对他进行命名，这个命名就像宏定义一样，你在这个位置进行命名之后，在代码里面的宏定义命名就是变成你在这个界面的命名。</p>\n<p>如何对引脚进行命名呢？右键对应的引脚，选择 Enter User Label</p>\n<p><img src=\"/post/cubeMX/cubeMx-AllGPIO/GPIO/Untitled%202.png\" alt=\"Untitled%202.png\"></p>\n<p>这个时候会出现一个框框供你填入你想要填入的名字，比如我想给这个 LED 的宏定义定位 LED_1 </p>\n<p>那么我就可以在框框中写入 LED_1，点击回车之后，名字就变成 LED_1 了。</p>\n<p>通常情况下我们并不可能只是定义一个 LED 灯，同一块板子上至少有差不多 2 到 3 个 LED 灯，或者更多。</p>\n<p>当我们配置了很多的 LED 或者输出的 IO 口时，我们如何查看我们定义多少个 IO 口呢？</p>\n<p>其实是有方法的，在版面选择 System View 变成系统的查看版面</p>\n<p><img src=\"/post/cubeMX/cubeMx-AllGPIO/GPIO/Untitled%203.png\" alt=\"Untitled%203.png\"></p>\n<p>点开之后你会发现我们可以看到各式各样的模块的记录，包括你定义了什么模块，以及什么模块中可能会发生故障等等。</p>\n<p>我们点开 GPIO</p>\n<p><img src=\"/post/cubeMX/cubeMx-AllGPIO/GPIO/Untitled%204.png\" alt=\"Untitled%204.png\"></p>\n<p><img src=\"/post/cubeMX/cubeMx-AllGPIO/GPIO/Untitled%205.png\" alt=\"Untitled%205.png\"></p>\n<p>这个时候我们就可以看到我们目前定义的所有的 LED 的状况啦，当然你也可以在这个版面修改你默认的电平，默认模式，默认输出速度，宏定义等等。</p>\n<p><img src=\"/post/cubeMX/cubeMx-AllGPIO/GPIO/Untitled%206.png\" alt=\"Untitled%206.png\"></p>\n<p>一切准备就绪，直接点击生成代码就可以了。</p>\n<h1 id=\"2-常见-GPIO-函数\"><a href=\"#2-常见-GPIO-函数\" class=\"headerlink\" title=\"2.常见 GPIO 函数\"></a><strong>2.常见 GPIO 函数</strong></h1><p>使用方面，这里会写出几个比较常用的函数，个人感觉用的次数是比较多的供参考，不过实际上到真正要多次使用的时候，建议还是自己看代码里面的宏定义来进行使用。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">1、GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);</code></pre>\n\n<p>读取当前的 PXn 口的对应状态，返回的状态一般为高低电平。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">2、void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);</code></pre>\n\n<p>更改当前对应 PXn 口的电平，更改为高电平和低电平</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">3、void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);</code></pre>\n\n<p>置反当前端口的电平，高电平变成低电平，低电平变成高电平。</p>\n","text":"1.配置 GPIO配置 GPI O大概是 CubeMX 中最最简单的一个模块的配置的，大概没有比这个更加简单的模块了，如果有那就是基本库。 但是，简单归简单，坑依旧是不见少到哪里去，配置之后找问题还是一样的自闭。 比方说你要定义一个 GPIO 的 LED 灯，以 STM32F42...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Embedded","slug":"Embedded","count":19,"path":"api/categories/Embedded.json"}],"tags":[{"name":"HAL","slug":"HAL","count":14,"path":"api/tags/HAL.json"},{"name":"cubeMX","slug":"cubeMX","count":18,"path":"api/tags/cubeMX.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E9%85%8D%E7%BD%AE-GPIO\"><span class=\"toc-text\">1.配置 GPIO</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E8%A7%81-GPIO-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.常见 GPIO 函数</span></a></li></ol>","author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"RNG","uid":"b99053034a0f282087f2cf75e7079caa","slug":"cubeMX/cubeMX-RNG/RNG","date":"2022-01-27T10:49:36.000Z","updated":"2022-02-08T15:35:50.163Z","comments":true,"path":"api/articles/cubeMX/cubeMX-RNG/RNG.json","keywords":null,"cover":"https://s2.loli.net/2022/02/07/pgAcBnkZQTOPmWJ.jpg","text":"1.CubeMX的配置 找到 RNG 使能 点开时钟配置，会提醒你配置，就按默认生成的时钟就可以了 2.RNG 使用&#x2F;&#x2F;RNG ：硬件随机数发生器 ：提供个32位的随机数 &#x2F;&#x2F;两个连续随机数之间的间隔是40个PLL48CLK时钟信号周期 &...","link":"","photos":[],"count_time":{"symbolsCount":731,"symbolsTime":"1 mins."},"categories":[{"name":"Embedded","slug":"Embedded","count":19,"path":"api/categories/Embedded.json"}],"tags":[{"name":"cubeMX","slug":"cubeMX","count":18,"path":"api/tags/cubeMX.json"},{"name":"RNG","slug":"RNG","count":1,"path":"api/tags/RNG.json"}],"author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"C/C++ 基础编程","uid":"c7ad3fc5539e6e09e5d04802e792c17b","slug":"C-C++/C-C++_AllBasis/C-C++_basis","date":"2022-01-24T10:49:36.000Z","updated":"2022-02-08T15:35:49.774Z","comments":true,"path":"api/articles/C-C++/C-C++_AllBasis/C-C++_basis.json","keywords":null,"cover":"https://s2.loli.net/2022/01/24/kBnujWr2NEJPVDI.jpg","text":"1.C++入门1.1.Hello world#include &lt;iostream&gt; using namespace std; int main() &#123; cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl; ...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[{"name":"Language","slug":"Language","count":8,"path":"api/categories/Language.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":7,"path":"api/tags/C-C.json"}],"author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}