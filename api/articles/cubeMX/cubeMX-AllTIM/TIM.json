{"title":"CM中TIM定时器的配置，以及启动方法","uid":"4db5497cbecd2cc278cbb61ec8b5e452","slug":"cubeMX/cubeMX-AllTIM/TIM","date":"2022-01-27T10:49:36.000Z","updated":"2022-02-08T15:35:50.121Z","comments":true,"path":"api/articles/cubeMX/cubeMX-AllTIM/TIM.json","keywords":null,"cover":"https://s2.loli.net/2022/01/27/X1xTAqOvDfNa7oE.jpg","content":"<h1 id=\"1-用HAL配置TIM的选项设置\"><a href=\"#1-用HAL配置TIM的选项设置\" class=\"headerlink\" title=\"1.用HAL配置TIM的选项设置\"></a><strong>1.用HAL配置TIM的选项设置</strong></h1><p>接着上一个工程继续进行编辑，由于 TIM 的高级定时器和低级定时器的界面是不同的，所以改动的方法和方式也是不同的，先由高级定时器开始理解。</p>\n<p>这里直接使用一张图来理解高级定时器的作用：</p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled.png\" alt=\"Untitled.png\"></p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%201.png\" alt=\"Untitled%201.png\"></p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%202.png\" alt=\"Untitled%202.png\"></p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%203.png\" alt=\"Untitled%203.png\"></p>\n<p>低级定时器就比较的简单，可以直接使能一个按键的的方法来进行配置：</p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%204.png\" alt=\"Untitled%204.png\"></p>\n<p>一次触发模式就是只执行一次中断的模式，不过由于不太常用所以经常被人忽略。</p>\n<p>由于高级定时器和低级定时间需要输入的数据一般存在区别，为了泛用性所以这里只是解释一下比较常用的数据和功能。一下将会列出比较常用的功能。</p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%205.png\" alt=\"Untitled%205.png\"></p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%206.png\" alt=\"Untitled%206.png\"></p>\n<p>以及溢出时间计算公式：</p>\n<p>Tout = TimeFiliter/PSC*ARR；</p>\n<p>Tout = （(PSC+1)/TimeFiliter）*（1+ARR）</p>\n<p>TimeFiliter：对应挂载时钟频率</p>\n<p>PSC：分频系数</p>\n<p>ARR：重装载值，也就是Period。</p>\n<p>注意计算结果永远是微秒us。</p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%207.png\" alt=\"Untitled%207.png\"></p>\n<hr>\n<h1 id=\"2-具体功能实现\"><a href=\"#2-具体功能实现\" class=\"headerlink\" title=\"2.具体功能实现\"></a><strong>2.具体功能实现</strong></h1><h2 id=\"2-1-四通道输入捕获-HAL-库版本的写法与封装（作用于好盈电调传感器）\"><a href=\"#2-1-四通道输入捕获-HAL-库版本的写法与封装（作用于好盈电调传感器）\" class=\"headerlink\" title=\"2.1.四通道输入捕获 HAL 库版本的写法与封装（作用于好盈电调传感器）\"></a>2.1.四通道输入捕获 HAL 库版本的写法与封装（作用于好盈电调传感器）</h2><h3 id=\"2-1-1-HAL-库的配置\"><a href=\"#2-1-1-HAL-库的配置\" class=\"headerlink\" title=\"2.1.1.HAL 库的配置\"></a>2.1.1.HAL 库的配置</h3><p>这里我是使用 TIM4 输入作为例子</p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%208.png\" alt=\"Untitled%208.png\"></p>\n<p>四通道配置为输入捕获，F4 定时器时钟为 90Mhz。</p>\n<p>要以 1Mhz 的频率检测，于是 psc 分频设置为 89，arr 为 65535。</p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%209.png\" alt=\"Untitled%209.png\"></p>\n<p>中断配置成全局中断，捕获到电平后会进入中断。</p>\n<h2 id=\"2-2-代码实现\"><a href=\"#2-2-代码实现\" class=\"headerlink\" title=\"2.2.代码实现\"></a>2.2.代码实现</h2><h3 id=\"2-2-1-外部控制代码\"><a href=\"#2-2-1-外部控制代码\" class=\"headerlink\" title=\"2.2.1.外部控制代码\"></a>2.2.1.外部控制代码</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;**\n* @brief 获取C615速度\n* @param argument: Not used\n* @retval None\n*&#x2F;\nvoid C615_ObtainSpeed(TIMxCHx_CAPTURE_t *TIMxCHx_CAPTURE, Snail_t *Snail_Power)\n&#123;\n\tif (TIMxCHx_CAPTURE-&gt;STA &amp; 0X80)\t\t\t&#x2F;&#x2F;成功捕获到了一次高电平\n\t&#123;\n\t\tTIMxCHx_CAPTURE-&gt;temp &#x3D; TIMxCHx_CAPTURE-&gt;STA &amp; 0X3F;\n\t\tTIMxCHx_CAPTURE-&gt;temp *&#x3D; 65536;\t\t\t\t\t\t&#x2F;&#x2F;溢出时间总和\n\t\tTIMxCHx_CAPTURE-&gt;temp +&#x3D; TIMxCHx_CAPTURE-&gt;Date2;\n\t\tTIMxCHx_CAPTURE-&gt;temp -&#x3D; TIMxCHx_CAPTURE-&gt;Date1;\t\t&#x2F;&#x2F;得到总的高电平时间\n\t\tif (abs(TIMxCHx_CAPTURE-&gt;temp) &gt; 500)           &#x2F;&#x2F;避免\n\t\t&#123;\n\t\t\tSnail_Power-&gt;realSpeed &#x3D; Snail_Power-&gt;realSpeed;\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\tSnail_Power-&gt;realSpeed &#x3D; TIMxCHx_CAPTURE-&gt;temp; \n\t\t&#125;\n\t\tTIMxCHx_CAPTURE-&gt;Date1 &#x3D; 0;\n\t\tTIMxCHx_CAPTURE-&gt;STA &#x3D; 0;\t\t\t\t&#x2F;&#x2F;开启下一次捕获\n\t&#125;\n&#125;</code></pre>\n\n<p>此代码放在固定频率控制函数里执行，获取高电平的时间。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">C615_ObtainSpeed(&amp;TIM4CH1_CAPTURE,&amp;Snail_PowerL);\nC615_ObtainSpeed(&amp;TIM4CH2_CAPTURE, &amp;Snail_PowerR);  &#x2F;&#x2F;调用过程</code></pre>\n\n<h3 id=\"2-2-2捕获函数调用与封装\"><a href=\"#2-2-2捕获函数调用与封装\" class=\"headerlink\" title=\"2.2.2捕获函数调用与封装\"></a>2.2.2捕获函数调用与封装</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;**\n  * @brief This function handles TIM4 global interrupt.\n  *&#x2F;\nvoid TIM4_IRQHandler(void)\n&#123;\n  &#x2F;* USER CODE BEGIN TIM4_IRQn 0 *&#x2F;\n\tC615_CaptureSpeed(TIM4, One);   &#x2F;&#x2F;捕获电平\n  &#x2F;* USER CODE END TIM4_IRQn 0 *&#x2F;\n  HAL_TIM_IRQHandler(&amp;htim4);\n  &#x2F;* USER CODE BEGIN TIM4_IRQn 1 *&#x2F;\n\n  &#x2F;* USER CODE END TIM4_IRQn 1 *&#x2F;\n&#125;</code></pre>\n\n<details class=\"custom-details\">\n<summary>其中 TIM 中断捕获函数封装</summary>\n<p><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void C615_CaptureSpeed(TIM_TypeDef * TIMx, uint8_t One_Two)\n&#123;\n\tC615_CaptureSpeed_CH1CH2(TIMx, &amp;TIM4CH1_CAPTURE, &amp;TIM4CH2_CAPTURE);\n\tif (One_Two &#x3D;&#x3D; Two)\n\t&#123;\n\t\tC615_CaptureSpeed_CH3CH4(TIMx, &amp;TIM4CH3_CAPTURE, &amp;TIM4CH4_CAPTURE);\n\t&#125;\n\n\tTIMx-&gt;SR &#x3D; 0;&#x2F;&#x2F;清除中断标志位 \n&#125;</code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;**\n* @brief 捕获第一组C615速度\n* @param argument: Not used\n* @retval None\n*&#x2F;\nvoid C615_CaptureSpeed_CH1CH2(TIM_TypeDef * TIM, TIMxCHx_CAPTURE_t *TIMxCH1_CAPTURE, TIMxCHx_CAPTURE_t *TIMxCH2_CAPTURE)\n&#123;\n\tuint16_t tsr;\n\ttsr &#x3D; TIM-&gt;SR;\n\t&#x2F;&#x2F;CH1中断处理\n\tif ((TIMxCH1_CAPTURE-&gt;STA &amp; 0X80) &#x3D;&#x3D; 0)&#x2F;&#x2F;还未成功捕获\t\n\t&#123;\n\t\tif (tsr &amp; 0X01)&#x2F;&#x2F;溢出\n\t\t&#123;\n\t\t\tif (TIMxCH1_CAPTURE-&gt;STA &amp; 0X40)&#x2F;&#x2F;已经捕获到高电平了\n\t\t\t&#123;\n\t\t\t\tif ((TIMxCH1_CAPTURE-&gt;STA &amp; 0X3F) &#x3D;&#x3D; 0X3F)&#x2F;&#x2F;高电平太长了\n\t\t\t\t&#123;\n\t\t\t\t\tTIMxCH1_CAPTURE-&gt;STA |&#x3D; 0X80;&#x2F;&#x2F;标记成功捕获了一次\n\t\t\t\t\tTIMxCH1_CAPTURE-&gt;Date2 &#x3D; 0XFFFF;\n\t\t\t\t&#125;\n\t\t\t\telse TIMxCH1_CAPTURE-&gt;STA++;\n\t\t\t&#125;\n\t\t&#125;\n\t\tif (tsr &amp; 0x02)&#x2F;&#x2F;捕获1发生捕获事件\n\t\t&#123;\n\t\t\tif (TIMxCH1_CAPTURE-&gt;STA &amp; 0X40)\t\t&#x2F;&#x2F;捕获到一个下降沿 \t\t\n\t\t\t&#123;\n\t\t\t\tTIMxCH1_CAPTURE-&gt;STA |&#x3D; 0X80;\t\t&#x2F;&#x2F;标记成功捕获到一次高电平脉宽\n\t\t\t\tTIMxCH1_CAPTURE-&gt;Date2 &#x3D; TIM-&gt;CCR1;\t&#x2F;&#x2F;获取当前的捕获值.\n\t\t\t\tTIM-&gt;CCER &amp;&#x3D; ~(1 &lt;&lt; 1);\t\t\t&#x2F;&#x2F;CC1P&#x3D;0 设置为上升沿捕获\n\t\t\t&#125;\n\t\t\telse  \t\t\t\t\t\t\t\t&#x2F;&#x2F;还未开始,第一次捕获上升沿\n\t\t\t&#123;\n\t\t\t\tTIMxCH1_CAPTURE-&gt;Date2 &#x3D; 0;\n\t\t\t\tTIMxCH1_CAPTURE-&gt;STA &#x3D; 0X40;\t\t&#x2F;&#x2F;标记捕获到了上升沿\n\t\t\t\tTIMxCH1_CAPTURE-&gt;Date1 &#x3D; TIM-&gt;CCR1;\n\t\t\t\tTIM-&gt;CCER |&#x3D; 1 &lt;&lt; 1; \t\t\t\t&#x2F;&#x2F;CC1P&#x3D;1 设置为下降沿捕获 \n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\t&#x2F;&#x2F;CH2中断处理\n\tif ((TIMxCH2_CAPTURE-&gt;STA &amp; 0X80) &#x3D;&#x3D; 0)&#x2F;&#x2F;还未成功捕获\t\n\t&#123;\n\t\tif (tsr &amp; 0X01)&#x2F;&#x2F;溢出\n\t\t&#123;\n\t\t\tif (TIMxCH2_CAPTURE-&gt;STA &amp; 0X40)&#x2F;&#x2F;已经捕获到高电平了\n\t\t\t&#123;\n\t\t\t\tif ((TIMxCH2_CAPTURE-&gt;STA &amp; 0X3F) &#x3D;&#x3D; 0X3F)&#x2F;&#x2F;高电平太长了\n\t\t\t\t&#123;\n\t\t\t\t\tTIMxCH2_CAPTURE-&gt;STA |&#x3D; 0X80;&#x2F;&#x2F;标记成功捕获了一次\n\t\t\t\t\tTIMxCH2_CAPTURE-&gt;Date2 &#x3D; 0XFFFF;\n\t\t\t\t&#125;\n\t\t\t\telse TIMxCH2_CAPTURE-&gt;STA++;\n\t\t\t&#125;\n\t\t&#125;\n\t\tif (tsr &amp; 0x04)&#x2F;&#x2F;捕获1发生捕获事件\n\t\t&#123;\n\t\t\tif (TIMxCH2_CAPTURE-&gt;STA &amp; 0X40)\t\t&#x2F;&#x2F;捕获到一个下降沿 \t\t\n\t\t\t&#123;\n\t\t\t\tTIMxCH2_CAPTURE-&gt;STA |&#x3D; 0X80;\t\t&#x2F;&#x2F;标记成功捕获到一次高电平脉宽\n\t\t\t\tTIMxCH2_CAPTURE-&gt;Date2 &#x3D; TIM-&gt;CCR2;\t&#x2F;&#x2F;获取当前的捕获值.\n\t\t\t\tTIM-&gt;CCER &amp;&#x3D; ~(1 &lt;&lt; 5);\t\t\t&#x2F;&#x2F;CC1P&#x3D;0 设置为上升沿捕获\n\t\t\t&#125;\n\t\t\telse  \t\t\t\t\t\t\t\t&#x2F;&#x2F;还未开始,第一次捕获上升沿\n\t\t\t&#123;\n\t\t\t\tTIMxCH2_CAPTURE-&gt;Date2 &#x3D; 0;\n\t\t\t\tTIMxCH2_CAPTURE-&gt;STA &#x3D; 0X40;\t\t&#x2F;&#x2F;标记捕获到了上升沿\n\t\t\t\tTIMxCH2_CAPTURE-&gt;Date1 &#x3D; TIM-&gt;CCR2;\n\t\t\t\tTIM-&gt;CCER |&#x3D; 1 &lt;&lt; 5; \t\t\t\t&#x2F;&#x2F;CC1P&#x3D;1 设置为下降沿捕获 \n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n&#125;\n\n&#x2F;**\n* @brief 捕获第二组C615速度\n* @param argument: Not used\n* @retval None\n*&#x2F;\nvoid C615_CaptureSpeed_CH3CH4(TIM_TypeDef * TIM, TIMxCHx_CAPTURE_t *TIMxCH3_CAPTURE, TIMxCHx_CAPTURE_t *TIMxCH4_CAPTURE)\n&#123;\n\tuint16_t tsr;\n\ttsr &#x3D; TIM-&gt;SR;\n\t&#x2F;&#x2F;CH3中断处理\n\tif ((TIMxCH3_CAPTURE-&gt;STA &amp; 0X80) &#x3D;&#x3D; 0)&#x2F;&#x2F;还未成功捕获\t\n\t&#123;\n\t\tif (tsr &amp; 0X01)&#x2F;&#x2F;溢出\n\t\t&#123;\n\t\t\tif (TIMxCH3_CAPTURE-&gt;STA &amp; 0X40)&#x2F;&#x2F;已经捕获到高电平了\n\t\t\t&#123;\n\t\t\t\tif ((TIMxCH3_CAPTURE-&gt;STA &amp; 0X3F) &#x3D;&#x3D; 0X3F)&#x2F;&#x2F;高电平太长了\n\t\t\t\t&#123;\n\t\t\t\t\tTIMxCH3_CAPTURE-&gt;STA |&#x3D; 0X80;&#x2F;&#x2F;标记成功捕获了一次\n\t\t\t\t\tTIMxCH3_CAPTURE-&gt;Date2 &#x3D; 0XFFFF;\n\t\t\t\t&#125;\n\t\t\t\telse TIMxCH3_CAPTURE-&gt;STA++;\n\t\t\t&#125;\n\t\t&#125;\n\t\tif (tsr &amp; 0x08)&#x2F;&#x2F;捕获1发生捕获事件\n\t\t&#123;\n\t\t\tif (TIMxCH3_CAPTURE-&gt;STA &amp; 0X40)\t\t&#x2F;&#x2F;捕获到一个下降沿 \t\t\n\t\t\t&#123;\n\t\t\t\tTIMxCH3_CAPTURE-&gt;STA |&#x3D; 0X80;\t\t&#x2F;&#x2F;标记成功捕获到一次高电平脉宽\n\t\t\t\tTIMxCH3_CAPTURE-&gt;Date2 &#x3D; TIM-&gt;CCR3;\t&#x2F;&#x2F;获取当前的捕获值.\n\t\t\t\tTIM-&gt;CCER &amp;&#x3D; ~(1 &lt;&lt; 9);\t\t\t&#x2F;&#x2F;CC1P&#x3D;0 设置为上升沿捕获\n\t\t\t&#125;\n\t\t\telse  \t\t\t\t\t\t\t\t&#x2F;&#x2F;还未开始,第一次捕获上升沿\n\t\t\t&#123;\n\t\t\t\tTIMxCH3_CAPTURE-&gt;Date2 &#x3D; 0;\n\t\t\t\tTIMxCH3_CAPTURE-&gt;STA &#x3D; 0X40;\t\t&#x2F;&#x2F;标记捕获到了上升沿\n\t\t\t\tTIMxCH3_CAPTURE-&gt;Date1 &#x3D; TIM-&gt;CCR3;\n\t\t\t\tTIM-&gt;CCER |&#x3D; 1 &lt;&lt; 9; \t\t\t\t&#x2F;&#x2F;CC1P&#x3D;1 设置为下降沿捕获 \n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\t&#x2F;&#x2F;CH4中断处理\n\tif ((TIMxCH4_CAPTURE-&gt;STA &amp; 0X80) &#x3D;&#x3D; 0)&#x2F;&#x2F;还未成功捕获\t\n\t&#123;\n\t\tif (tsr &amp; 0X01)&#x2F;&#x2F;溢出\n\t\t&#123;\n\t\t\tif (TIMxCH4_CAPTURE-&gt;STA &amp; 0X40)&#x2F;&#x2F;已经捕获到高电平了\n\t\t\t&#123;\n\t\t\t\tif ((TIMxCH4_CAPTURE-&gt;STA &amp; 0X3F) &#x3D;&#x3D; 0X3F)&#x2F;&#x2F;高电平太长了\n\t\t\t\t&#123;\n\t\t\t\t\tTIMxCH4_CAPTURE-&gt;STA |&#x3D; 0X80;&#x2F;&#x2F;标记成功捕获了一次\n\t\t\t\t\tTIMxCH4_CAPTURE-&gt;Date2 &#x3D; 0XFFFF;\n\t\t\t\t&#125;\n\t\t\t\telse TIMxCH4_CAPTURE-&gt;STA++;\n\t\t\t&#125;\n\t\t&#125;\n\t\tif (tsr &amp; 0x10)&#x2F;&#x2F;捕获1发生捕获事件\n\t\t&#123;\n\t\t\tif (TIMxCH4_CAPTURE-&gt;STA &amp; 0X40)\t\t&#x2F;&#x2F;捕获到一个下降沿 \t\t\n\t\t\t&#123;\n\t\t\t\tTIMxCH4_CAPTURE-&gt;STA |&#x3D; 0X80;\t\t&#x2F;&#x2F;标记成功捕获到一次高电平脉宽\n\t\t\t\tTIMxCH4_CAPTURE-&gt;Date2 &#x3D; TIM-&gt;CCR4;\t&#x2F;&#x2F;获取当前的捕获值.\n\t\t\t\tTIM-&gt;CCER &amp;&#x3D; ~(1 &lt;&lt; 13);\t\t\t&#x2F;&#x2F;CC1P&#x3D;0 设置为上升沿捕获\n\t\t\t&#125;\n\t\t\telse  \t\t\t\t\t\t\t\t&#x2F;&#x2F;还未开始,第一次捕获上升沿\n\t\t\t&#123;\n\t\t\t\tTIMxCH4_CAPTURE-&gt;Date2 &#x3D; 0;\n\t\t\t\tTIMxCH4_CAPTURE-&gt;STA &#x3D; 0X40;\t\t&#x2F;&#x2F;标记捕获到了上升沿\n\t\t\t\tTIMxCH4_CAPTURE-&gt;Date1 &#x3D; TIM-&gt;CCR4;\n\t\t\t\tTIM-&gt;CCER |&#x3D; 1 &lt;&lt; 13; \t\t\t\t&#x2F;&#x2F;CC1P&#x3D;1 设置为下降沿捕获 \n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n\t\n&#125;</code></pre>\n</p>\n</details>\n<h1 id=\"3-精确控制PWM脉冲量\"><a href=\"#3-精确控制PWM脉冲量\" class=\"headerlink\" title=\"3.精确控制PWM脉冲量\"></a><strong>3.精确控制PWM脉冲量</strong></h1><h2 id=\"3-1-配置主输出定时器\"><a href=\"#3-1-配置主输出定时器\" class=\"headerlink\" title=\"3.1.配置主输出定时器\"></a>3.1.配置主输出定时器</h2><p>先按照普通 PWM 输出配置，需要改动是其中的模式。</p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%2010.png\" alt=\"Untitled\"></p>\n<h2 id=\"3-2-配置从定时器\"><a href=\"#3-2-配置从定时器\" class=\"headerlink\" title=\"3.2.配置从定时器\"></a>3.2.配置从定时器</h2><p>主从定时器之前的关系是固定的，在手册上可以查到。我这里用的是 F407 的图。</p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%2011.png\" alt=\"Untitled\"></p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%2012.png\" alt=\"Untitled\"></p>\n<p>例如：假如让 TIM8 作为从定时器，那么其时钟源有 ITR0，ITR1，ITR2，ITR3，分别对应着不同的主定时器，选择需要的主定时器就要按照上面标的时钟源。</p>\n<p><img src=\"/post/cubeMX/cubeMX-AllTIM/TIM/Untitled%2013.png\" alt=\"Untitled\"></p>\n<p>记得要把中断也打开。</p>\n<h2 id=\"3-3-用户启动代码\"><a href=\"#3-3-用户启动代码\" class=\"headerlink\" title=\"3.3.用户启动代码\"></a>3.3.用户启动代码</h2><p>主定时器方面使用 PWM 启动的函数启动，从定时器用开始定时器中断函数启动。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"> HAL_TIM_PWM_Start(&amp;htimx, TIM_CHANNEL_x);\n__HAL_TIM_CLEAR_IT(&amp;htimx, TIM_IT_UPDATE);\n HAL_TIM_Base_Start_IT(&amp;htimx);</code></pre>\n\n<p>这里为什么要加上清除中断标志位呢，因为从定时器就是通过计数 PWM 直到溢出才会产生更新中断，所以一开始要先清标志位，否则开机就会进一次更新中断。</p>\n<h1 id=\"4-多路PWM脉冲精准控制\"><a href=\"#4-多路PWM脉冲精准控制\" class=\"headerlink\" title=\"4.多路PWM脉冲精准控制\"></a><strong>4.多路PWM脉冲精准控制</strong></h1><h2 id=\"4-1-多路-PWM-控制思路\"><a href=\"#4-1-多路-PWM-控制思路\" class=\"headerlink\" title=\"4.1.多路 PWM 控制思路\"></a>4.1.多路 PWM 控制思路</h2><p>  按照上面的方法，虽然也可以精确控制脉冲，但是从定时器计数是算脉冲的数量的，没有办法同时控制多路不同的 PWM 输出。于是可以先把从定时器的通道改成比较不输出模式，让各个通道 CCR 寄存器与 CNT 作比较，只要计数到了便产生一个中断，在中断里可以控制输出 PWM 占空比，只要占空比为 0 了就几乎等于是可以认为不输出了（至少我遇到电机占空比为 0 了就不动了），于是便可以使用一个定时器控制多个设备了。但是要产生中断前提是 CCR 值必须大于等于 CNT 的值，否则要等到 CNT 溢出了才可以产生中断。</p>\n<p>  按照下面的机制，我们可以需要脉冲输出的时候，获取当前 CNT 的值，然后我们的总目标值是：当前值+需要目标值，等到中断产生了就可以把占空比归0。但是这样方法又会有一个问题，假设你给的脉冲值不变，当 CNT 溢出的时候，便会一直输出脉冲，这样就会导致一直循环，这时候需要过零处理。</p>\n<h2 id=\"4-2-过零处理\"><a href=\"#4-2-过零处理\" class=\"headerlink\" title=\"4.2.过零处理\"></a>4.2.过零处理</h2><h3 id=\"4-2-1-计圈数\"><a href=\"#4-2-1-计圈数\" class=\"headerlink\" title=\"4.2.1.计圈数\"></a>4.2.1.计圈数</h3><p>  就是每当 CNT 值大于设定值而溢出时，可以使用一个变量把多余的值以圈数形式记录起来，理论值 = （圈数*最大值）+（当前值）。但是缺点就是只要数据足够大，还是会溢出，对于长时间工作的设备来说不适合。</p>\n<h3 id=\"4-2-2-直接减周期\"><a href=\"#4-2-2-直接减周期\" class=\"headerlink\" title=\"4.2.2.直接减周期\"></a>4.2.2.直接减周期</h3><p>  当 CNT 溢出时，会产生一个更新中断，我们可以在中断里，使一个标志位置1，之后我们可以把所有设备的底层都统一种解算，判断当该标志位置1的时候，当前的总路程-最大值，在输出最大值。</p>\n","text":"1.用HAL配置TIM的选项设置接着上一个工程继续进行编辑，由于 TIM 的高级定时器和低级定时器的界面是不同的，所以改动的方法和方式也是不同的，先由高级定时器开始理解。 这里直接使用一张图来理解高级定时器的作用： 低级定时器就比较的简单，可以直接使能一个按键的的方法来进行配置：...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"Embedded","slug":"Embedded","count":19,"path":"api/categories/Embedded.json"}],"tags":[{"name":"HAL","slug":"HAL","count":14,"path":"api/tags/HAL.json"},{"name":"cubeMX","slug":"cubeMX","count":18,"path":"api/tags/cubeMX.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E7%94%A8HAL%E9%85%8D%E7%BD%AETIM%E7%9A%84%E9%80%89%E9%A1%B9%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">1.用HAL配置TIM的选项设置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%85%B7%E4%BD%93%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2.具体功能实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%9B%9B%E9%80%9A%E9%81%93%E8%BE%93%E5%85%A5%E6%8D%95%E8%8E%B7-HAL-%E5%BA%93%E7%89%88%E6%9C%AC%E7%9A%84%E5%86%99%E6%B3%95%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%BD%9C%E7%94%A8%E4%BA%8E%E5%A5%BD%E7%9B%88%E7%94%B5%E8%B0%83%E4%BC%A0%E6%84%9F%E5%99%A8%EF%BC%89\"><span class=\"toc-text\">2.1.四通道输入捕获 HAL 库版本的写法与封装（作用于好盈电调传感器）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-1-HAL-%E5%BA%93%E7%9A%84%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2.1.1.HAL 库的配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2.2.代码实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-1-%E5%A4%96%E9%83%A8%E6%8E%A7%E5%88%B6%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">2.2.1.外部控制代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-2%E6%8D%95%E8%8E%B7%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%B8%8E%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">2.2.2捕获函数调用与封装</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E7%B2%BE%E7%A1%AE%E6%8E%A7%E5%88%B6PWM%E8%84%89%E5%86%B2%E9%87%8F\"><span class=\"toc-text\">3.精确控制PWM脉冲量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E9%85%8D%E7%BD%AE%E4%B8%BB%E8%BE%93%E5%87%BA%E5%AE%9A%E6%97%B6%E5%99%A8\"><span class=\"toc-text\">3.1.配置主输出定时器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E9%85%8D%E7%BD%AE%E4%BB%8E%E5%AE%9A%E6%97%B6%E5%99%A8\"><span class=\"toc-text\">3.2.配置从定时器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E7%94%A8%E6%88%B7%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">3.3.用户启动代码</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E5%A4%9A%E8%B7%AFPWM%E8%84%89%E5%86%B2%E7%B2%BE%E5%87%86%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">4.多路PWM脉冲精准控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E5%A4%9A%E8%B7%AF-PWM-%E6%8E%A7%E5%88%B6%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">4.1.多路 PWM 控制思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E8%BF%87%E9%9B%B6%E5%A4%84%E7%90%86\"><span class=\"toc-text\">4.2.过零处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-1-%E8%AE%A1%E5%9C%88%E6%95%B0\"><span class=\"toc-text\">4.2.1.计圈数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-2-%E7%9B%B4%E6%8E%A5%E5%87%8F%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">4.2.2.直接减周期</span></a></li></ol></li></ol></li></ol>","author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CM中USART和DMA的实际关系（DR16为例）","uid":"20f9345191bccef7afe482693ca5ca5c","slug":"cubeMX/cubeMX-AllUD/USART_DMA","date":"2022-01-27T10:49:36.000Z","updated":"2022-02-08T15:35:50.141Z","comments":true,"path":"api/articles/cubeMX/cubeMX-AllUD/USART_DMA.json","keywords":null,"cover":"https://s2.loli.net/2022/01/27/yBF9AXLxECZgwG3.jpg","text":"第一是因为 USART 和 DMA 在 RM 比赛中属于比较常用的模块，需要详细的了解清楚对应的方法。 第二是因为 USART 和 DMA 的配置实在是太坑了，我自己在这里也磨了将近 1 个星期的时间，这一个星期的时间我收集和分析网上各种各样的例子，以及对 HAL 的程序进行了阅...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Embedded","slug":"Embedded","count":19,"path":"api/categories/Embedded.json"}],"tags":[{"name":"HAL","slug":"HAL","count":14,"path":"api/tags/HAL.json"},{"name":"cubeMX","slug":"cubeMX","count":18,"path":"api/tags/cubeMX.json"}],"author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CM中USART的配置，以及启动方法","uid":"dea130efefdf0c7df84d0658a83a4131","slug":"cubeMX/cubeMX-AllUSART/USART","date":"2022-01-27T10:49:36.000Z","updated":"2022-02-08T15:35:50.142Z","comments":true,"path":"api/articles/cubeMX/cubeMX-AllUSART/USART.json","keywords":null,"cover":"https://s2.loli.net/2022/01/27/176AIpMQUOKfNFt.jpg","text":"1.USART 配置USART 的配置部分比较的难搞，但是其实大部分如果注意一下的话，问题其实并不太大。 以下是 USART 中一些比较常用的通讯方式（其实实际上用的多的也就异步） 以及下面还有 RS232 的通信模式 这里涵盖了大部分的串口的通信模式，同时也可以说是涵盖了大部分...","link":"","photos":[],"count_time":{"symbolsCount":808,"symbolsTime":"1 mins."},"categories":[{"name":"Embedded","slug":"Embedded","count":19,"path":"api/categories/Embedded.json"}],"tags":[{"name":"HAL","slug":"HAL","count":14,"path":"api/tags/HAL.json"},{"name":"cubeMX","slug":"cubeMX","count":18,"path":"api/tags/cubeMX.json"}],"author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}