{"title":"C/C++ 基础编程","uid":"c7ad3fc5539e6e09e5d04802e792c17b","slug":"C-C++/C-C++_AllBasis/C-C++_basis","date":"2022-01-24T10:49:36.000Z","updated":"2022-02-08T15:35:49.774Z","comments":true,"path":"api/articles/C-C++/C-C++_AllBasis/C-C++_basis.json","keywords":null,"cover":"https://s2.loli.net/2022/01/24/kBnujWr2NEJPVDI.jpg","content":"<h1 id=\"1-C-入门\"><a href=\"#1-C-入门\" class=\"headerlink\" title=\"1.C++入门\"></a><strong>1.C++入门</strong></h1><h2 id=\"1-1-Hello-world\"><a href=\"#1-1-Hello-world\" class=\"headerlink\" title=\"1.1.Hello world\"></a>1.1.Hello world</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;</code></pre>\n\n<h2 id=\"1-2-数据输入\"><a href=\"#1-2-数据输入\" class=\"headerlink\" title=\"1.2.数据输入\"></a>1.2.数据输入</h2><p>语法：<strong>cin &gt;&gt; 变量</strong></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n\nint main()&#123;\n\n\t&#x2F;&#x2F;整型输入\n\tint a &#x3D; 0;\n\tcout &lt;&lt; &quot;请输入整型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; a;\n\tcout &lt;&lt; a &lt;&lt; endl;\n\n\t&#x2F;&#x2F;浮点型输入\n\tdouble d &#x3D; 0;\n\tcout &lt;&lt; &quot;请输入浮点型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; d;\n\tcout &lt;&lt; d &lt;&lt; endl;\n\n\t&#x2F;&#x2F;字符型输入\n\tchar ch &#x3D; 0;\n\tcout &lt;&lt; &quot;请输入字符型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; ch;\n\tcout &lt;&lt; ch &lt;&lt; endl;\n\n\t&#x2F;&#x2F;字符串型输入\n\tstring str;\n\tcout &lt;&lt; &quot;请输入字符串型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; str;\n\tcout &lt;&lt; str &lt;&lt; endl;\n\n\t&#x2F;&#x2F;布尔类型输入\n\tbool flag &#x3D; true;\n\tcout &lt;&lt; &quot;请输入布尔型变量：&quot; &lt;&lt; endl;\n\tcin &gt;&gt; flag;\n\tcout &lt;&lt; flag &lt;&lt; endl;\n\tsystem(&quot;pause&quot;);\n\treturn EXIT_SUCCESS;\n&#125;</code></pre>\n\n<h1 id=\"2-程序流程结构\"><a href=\"#2-程序流程结构\" class=\"headerlink\" title=\"2.程序流程结构\"></a><strong>2.程序流程结构</strong></h1><h2 id=\"2-1-三目运算符\"><a href=\"#2-1-三目运算符\" class=\"headerlink\" title=\"2.1.三目运算符\"></a>2.1.三目运算符</h2><p>语法：<strong>表达式1？表达式2：表达式3</strong></p>\n<p><strong>解释：</strong></p>\n<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>\n<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int a &#x3D; 10;\n    int b &#x3D; 20;\n    int c &#x3D; 0;\n\n    c &#x3D; a &gt; b ? a : b;\n    cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;\n\n    &#x2F;&#x2F;C++中三目运算符返回的是变量,可以继续赋值\n    (a &gt; b ? a : b) &#x3D; 100;\n    cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;\n    cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;\n    cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;</code></pre>\n\n<p>运行结果：</p>\n<p><img src=\"/post/C-C++/C-C++_AllBasis/C-C++_basis/Untitled.png\" alt=\"Untitled.png\"></p>\n<h2 id=\"2-2-do……while-语句\"><a href=\"#2-2-do……while-语句\" class=\"headerlink\" title=\"2.2.do……while 语句\"></a>2.2.do……while 语句</h2><p>语法：<strong>do{ 循环语句 } while( 循环条件 )</strong></p>\n<ul>\n<li>注意：与 while 的区别在于 do……while 会先执行一次循环语句，再判断循环条件</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int num &#x3D; 10;\n\n    do\n    &#123;\n        cout &lt;&lt; num &lt;&lt; endl;\n        num++;\n    &#125; while (num &lt; 10);\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;</code></pre>\n\n<p>运行结果：</p>\n<p><img src=\"/post/C-C++/C-C++_AllBasis/C-C++_basis/Untitled%201.png\" alt=\"Untitled%201.png\"></p>\n<h2 id=\"2-3-continue语句\"><a href=\"#2-3-continue语句\" class=\"headerlink\" title=\"2.3.continue语句\"></a>2.3.continue语句</h2><p>语法：<strong>continue；</strong></p>\n<p>作用：<strong>在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</strong></p>\n<ul>\n<li>注意：continue 并没有使整个循环终止，而 break 会跳出循环</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main()\n&#123;\n    for (int i &#x3D; 0; i &lt; 10; i++)\n    &#123;\n        if (i % 2 &#x3D;&#x3D; 0)\n        &#123;\n            continue;\n        &#125;\n        cout &lt;&lt; &quot;i &#x3D; &quot; &lt;&lt; i &lt;&lt; &quot;\\n&quot;\n             &lt;&lt; endl;\n    &#125;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;</code></pre>\n\n<p>运行结果：</p>\n<p><img src=\"/post/C-C++/C-C++_AllBasis/C-C++_basis/Untitled%202.png\" alt=\"Untitled%202.png\"></p>\n<h2 id=\"2-4-goto语句\"><a href=\"#2-4-goto语句\" class=\"headerlink\" title=\"2.4.goto语句\"></a>2.4.goto语句</h2><p>语法：<strong>goto 标记；</strong></p>\n<p>作用：<strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</strong></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nint main()\n&#123;\n    cout &lt;&lt; &quot;1&quot; &lt;&lt; endl;\n\n    goto FLAG;\n\n    cout &lt;&lt; &quot;2&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;3&quot; &lt;&lt; endl;\n    cout &lt;&lt; &quot;4&quot; &lt;&lt; endl;\n\nFLAG:\n\n    cout &lt;&lt; &quot;5&quot; &lt;&lt; endl;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;</code></pre>\n\n<p>运行结果：</p>\n<p><img src=\"/post/C-C++/C-C++_AllBasis/C-C++_basis/Untitled%203.png\" alt=\"Untitled%203.png\"></p>\n<h1 id=\"3-数组\"><a href=\"#3-数组\" class=\"headerlink\" title=\"3.数组\"></a><strong>3.数组</strong></h1><h2 id=\"3-1-二维数组数组名\"><a href=\"#3-1-二维数组数组名\" class=\"headerlink\" title=\"3.1.二维数组数组名\"></a>3.1.二维数组数组名</h2><ul>\n<li>查看二维数组所占内存空间</li>\n<li>获取二维数组首地址</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">int main() &#123;\n\n\t&#x2F;&#x2F;二维数组数组名\n\tint arr[2][3] &#x3D;\n\t&#123;\n\t\t&#123;1,2,3&#125;,\n\t\t&#123;4,5,6&#125;\n\t&#125;;\n\n\tcout &lt;&lt; &quot;二维数组大小： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组一行大小： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组元素大小： &quot; &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;二维数组行数： &quot; &lt;&lt; sizeof(arr) &#x2F; sizeof(arr[0]) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组列数： &quot; &lt;&lt; sizeof(arr[0]) &#x2F; sizeof(arr[0][0]) &lt;&lt; endl;\n\n\t&#x2F;&#x2F;地址\n\tcout &lt;&lt; &quot;二维数组首地址：&quot; &lt;&lt; arr &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第一行地址：&quot; &lt;&lt; arr[0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第二行地址：&quot; &lt;&lt; arr[1] &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;二维数组第一个元素地址：&quot; &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;\n\tcout &lt;&lt; &quot;二维数组第二个元素地址：&quot; &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;</code></pre>\n\n<p><img src=\"/post/C-C++/C-C++_AllBasis/C-C++_basis/Untitled%204.png\" alt=\"Untitled%204.png\"></p>\n<p>总结1：二维数组名就是这个数组的首地址</p>\n<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>\n<h1 id=\"4-函数\"><a href=\"#4-函数\" class=\"headerlink\" title=\"4.函数\"></a><strong>4.函数</strong></h1><h2 id=\"4-1-函数的声明\"><a href=\"#4-1-函数的声明\" class=\"headerlink\" title=\"4.1.函数的声明\"></a>4.1.函数的声明</h2><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>\n<ul>\n<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">&#x2F;&#x2F;声明可以多次，定义只能一次\n&#x2F;&#x2F;声明\nint max(int a, int b);\nint max(int a, int b);\n&#x2F;&#x2F;定义\nint max(int a, int b)\n&#123;\n\treturn a &gt; b ? a : b;\n&#125;\n\nint main() &#123;\n\n\tint a &#x3D; 100;\n\tint b &#x3D; 200;\n\n\tcout &lt;&lt; max(a, b) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;</code></pre>\n\n<h1 id=\"5-指针\"><a href=\"#5-指针\" class=\"headerlink\" title=\"5.指针\"></a><strong>5.指针</strong></h1><h2 id=\"5-1-指针所占内存空间\"><a href=\"#5-1-指针所占内存空间\" class=\"headerlink\" title=\"5.1.指针所占内存空间\"></a>5.1.指针所占内存空间</h2><p>所有指针类型在32位操作系统下是4个字节</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">int main() &#123;\n\n\tint a &#x3D; 10;\n\n\tint * p;\n\tp &#x3D; &amp;a; &#x2F;&#x2F;指针指向数据a的地址\n\n\tcout &lt;&lt; *p &lt;&lt; endl; &#x2F;&#x2F;* 解引用\n\tcout &lt;&lt; sizeof(p) &lt;&lt; endl;\n\tcout &lt;&lt; sizeof(char *) &lt;&lt; endl;\n\tcout &lt;&lt; sizeof(float *) &lt;&lt; endl;\n\tcout &lt;&lt; sizeof(double *) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;</code></pre>\n\n<h2 id=\"5-2-空指针和野指针\"><a href=\"#5-2-空指针和野指针\" class=\"headerlink\" title=\"5.2.空指针和野指针\"></a>5.2.空指针和野指针</h2><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>\n<ul>\n<li>用途：初始化指针变量</li>\n<li>注意：空指针指向的内存是不可以访问的</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">int main() &#123;\n\n\t&#x2F;&#x2F;指针变量p指向内存地址编号为0的空间\n\tint * p &#x3D; NULL;\n\n\t&#x2F;&#x2F;访问空指针报错 \n\t&#x2F;&#x2F;内存编号0 ~255为系统占用内存，不允许用户访问\n\tcout &lt;&lt; *p &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;</code></pre>\n\n<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">int main() &#123;\n\n\t&#x2F;&#x2F;指针变量p指向内存地址编号为0x1100的空间\n\tint * p &#x3D; (int *)0x1100;\n\n\t&#x2F;&#x2F;访问野指针报错 \n\tcout &lt;&lt; *p &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;</code></pre>\n\n<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>\n<h1 id=\"6-结构体\"><a href=\"#6-结构体\" class=\"headerlink\" title=\"6.结构体\"></a><strong>6.结构体</strong></h1><h2 id=\"6-1-结构体中-const使用场景\"><a href=\"#6-1-结构体中-const使用场景\" class=\"headerlink\" title=\"6.1.结构体中 const使用场景\"></a>6.1.结构体中 const使用场景</h2><p><strong>作用：</strong><br>用const来防止误操作</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">&#x2F;&#x2F;学生结构体定义\nstruct student\n&#123;\n\t&#x2F;&#x2F;成员列表\n\tstring name;  &#x2F;&#x2F;姓名\n\tint age;      &#x2F;&#x2F;年龄\n\tint score;    &#x2F;&#x2F;分数\n&#125;;\n\n&#x2F;&#x2F;const使用场景\nvoid printStudent(const student *stu) &#x2F;&#x2F;加const防止函数体中的误操作\n&#123;\n\t&#x2F;&#x2F;stu-&gt;age &#x3D; 100; &#x2F;&#x2F;操作失败，因为加了const修饰\n\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;\n\n&#125;\n\nint main() &#123;\n\n\tstudent stu &#x3D; &#123; &quot;张三&quot;,18,100 &#125;;\n\n\tprintStudent(&amp;stu);\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;</code></pre>\n\n<h2 id=\"6-2-结构体中的字节对齐\"><a href=\"#6-2-结构体中的字节对齐\" class=\"headerlink\" title=\"6.2.结构体中的字节对齐\"></a>6.2.结构体中的字节对齐</h2><details class=\"custom-details\">\n<summary>第一个例子结构体</summary>\n<p><pre><code><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">struct STUDENT\n&#123;\n    char a;\n    int b;\n&#125;data;</code></pre>\n</code></pre>\n</p>\n</details>\n<p>是占 6 字节吗？不是，其实占了 8 字节，这个就叫字节对齐。</p>\n<p>结构体变量 data 的成员中占内存最多的数据类型是 int 型，其占 4 字节的内存空间，那么所有成员在分配内存时都要与 4 字节的长度对齐。也就是说，虽然 char 只占 1 字节，但是为了与 4 字节的长度对齐，它后面的 3 字节都会空着，即：</p>\n<p><img src=\"/post/C-C++/C-C++_AllBasis/C-C++_basis/Untitled%205.png\" alt=\"Untitled%205.png\"></p>\n<p>所谓空着其实也不是里面真的什么都没有，它就同定义了一个变量但没有初始化一样，里面是一个很小的、负的填充字。为了便于表达，我们就暂且称之为空好了。</p>\n<ul>\n<li>第二个例子结构体  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">如果结构体成员为：\nstruct STUDENT\n&#123;\n    char a;\n    char b;\n    int c;\n&#125;data;</code></pre>\n<ul>\n<li>答案：  <img src=\"/post/C-C++/C-C++_AllBasis/C-C++_basis/Untitled%206.png\" alt=\"Untitled%206.png\"></li>\n</ul>\n</li>\n<li>第三个例子结构体  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">struct STUDENT\n&#123;\n    char a;\n    char b;\n    char c;\n    char d;\n    char e;\n    int f;\n&#125;data;</code></pre>\n<ul>\n<li>答案  <img src=\"/post/C-C++/C-C++_AllBasis/C-C++_basis/Untitled%207.png\" alt=\"Untitled%207.png\"></li>\n</ul>\n</li>\n<li>第四个例子结构体  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">struct STUDENT\n&#123;\n    char a;\n    int b;\n    char c;\n&#125;data;</code></pre>\n<ul>\n<li>答案：  <img src=\"/post/C-C++/C-C++_AllBasis/C-C++_basis/Untitled%208.png\" alt=\"Untitled%208.png\"></li>\n</ul>\n</li>\n<li>第五个例子结构体  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">struct STUDENT\n&#123;\n    char name[10];\n    int age;\n    char sex;\n    float score;\n&#125;data;</code></pre>\n<ul>\n<li>答案：  <img src=\"/post/C-C++/C-C++_AllBasis/C-C++_basis/Untitled%209.png\" alt=\"Untitled%209.png\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"参考与致谢\"><a href=\"#参考与致谢\" class=\"headerlink\" title=\"参考与致谢\"></a>参考与致谢</h1><ul>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/37439983\">C/C++ 中的static关键字</a></p>\n</li>\n<li><p><a href=\"http://c.biancheng.net/view/243.html\">结构体字节对齐，C语言结构体字节对齐详解</a></p>\n</li>\n</ul>\n","text":"1.C++入门1.1.Hello world#include &lt;iostream&gt; using namespace std; int main() &#123; cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl; ...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[{"name":"Language","slug":"Language","count":8,"path":"api/categories/Language.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":7,"path":"api/tags/C-C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-C-%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">1.C++入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-Hello-world\"><span class=\"toc-text\">1.1.Hello world</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">1.2.数据输入</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.程序流程结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">2.1.三目运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-do%E2%80%A6%E2%80%A6while-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2.2.do……while 语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-continue%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2.3.continue语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-goto%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2.4.goto语句</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">3.数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%95%B0%E7%BB%84%E5%90%8D\"><span class=\"toc-text\">3.1.二维数组数组名</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E5%87%BD%E6%95%B0%E7%9A%84%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">4.1.函数的声明</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E6%8C%87%E9%92%88\"><span class=\"toc-text\">5.指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E6%8C%87%E9%92%88%E6%89%80%E5%8D%A0%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">5.1.指针所占内存空间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E7%A9%BA%E6%8C%87%E9%92%88%E5%92%8C%E9%87%8E%E6%8C%87%E9%92%88\"><span class=\"toc-text\">5.2.空指针和野指针</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">6.结构体</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-1-%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD-const%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">6.1.结构体中 const使用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-2-%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E7%9A%84%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90\"><span class=\"toc-text\">6.2.结构体中的字节对齐</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E4%B8%8E%E8%87%B4%E8%B0%A2\"><span class=\"toc-text\">参考与致谢</span></a></li></ol>","author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C/C++ 序章","uid":"fb03c6ff7a7697bc30c623660715d012","slug":"C-C++/C-C++_list","date":"2022-01-25T10:49:36.000Z","updated":"2022-02-08T15:35:49.812Z","comments":true,"path":"api/articles/C-C++/C-C++_list.json","keywords":null,"cover":"https://s2.loli.net/2022/01/25/FjO4qZNWp8gDwLc.jpg","text":"1.目录 该篇章主要分为两大部分： C/C++ 基础知识：该部分是 C/C++ 通用的基础内容 C++ 核心知识：涉及 C++ 类和对象内容 1.1.C/C++ 基础知识该部分的内容只是涉及到平时易错以及遗忘点，用的频繁的语法请移步到如黑马等专门的教程中了解。 C/C++ 基础编...","link":"","photos":[],"count_time":{"symbolsCount":287,"symbolsTime":"1 mins."},"categories":[{"name":"Language","slug":"Language","count":8,"path":"api/categories/Language.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":7,"path":"api/tags/C-C.json"}],"author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"C++ 面向对象三大特征","uid":"685a5f7f3a39655d238f8071cde76eaf","slug":"C-C++/C-C++_AllFeature/C-C++_Feature","date":"2022-01-24T10:49:36.000Z","updated":"2022-02-08T15:35:49.785Z","comments":true,"path":"api/articles/C-C++/C-C++_AllFeature/C-C++_Feature.json","keywords":null,"cover":"https://s2.loli.net/2022/01/24/tXfKMiY9yCQpqB4.jpg","text":"1.封装1.1.封装的意义封装是C++面向对象三大特性之一 封装的意义： 将属性和行为作为一个整体，表现生活中的事物 将属性和行为加以权限控制 封装意义一： 在设计类的时候，属性和行为写在一起，表现事物 语法： class 类名&#123; 访问权限： 属性 / 行为 &#125...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Language","slug":"Language","count":8,"path":"api/categories/Language.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":7,"path":"api/tags/C-C.json"}],"author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}