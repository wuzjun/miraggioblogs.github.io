{"title":"Makefile 编译工程","uid":"c22a4f1df3d378140aa51aa8ca0097a3","slug":"Linux/All Makefile/总工程/Makefile 编译工程","date":"2022-02-05T12:49:36.000Z","updated":"2022-02-20T12:58:29.988Z","comments":true,"path":"api/articles/Linux/All Makefile/总工程/Makefile 编译工程.json","keywords":null,"cover":"https://s2.loli.net/2022/02/16/aJPDzOkA5dBSWXQ.jpg","content":"<h1 id=\"1-编译初级工程\"><a href=\"#1-编译初级工程\" class=\"headerlink\" title=\"1.编译初级工程\"></a><strong>1.编译初级工程</strong></h1><p>一般工程，会把文件按类别分文件夹存放。可以把生成的文件也用一个文件夹存起来，编译文件在提交或者备份都是不需要的，可以删除。</p>\n<p>按照这种思路，结合之前学习的知识，对之前<code>main.c</code>和<code>mp3.c</code>工程进行修改。</p>\n<h2 id=\"1-1-把文件归档\"><a href=\"#1-1-把文件归档\" class=\"headerlink\" title=\"1.1.把文件归档\"></a>1.1.把文件归档</h2><ul>\n<li>首先创建<code>module1</code>和<code>module2</code>两个文件夹<br>&nbsp;</li>\n<li>再把工程里的<code>mp3.c</code>和<code>main.c</code>分别移动到两个文件夹中，模拟工程文件分类。<br>&nbsp;</li>\n<li>最后效果如图：  <img src=\"/post/Linux/All%20Makefile/%E6%80%BB%E5%B7%A5%E7%A8%8B/Makefile%20%E7%BC%96%E8%AF%91%E5%B7%A5%E7%A8%8B/Untitled.png\" alt=\"Untitled\"></li>\n</ul>\n<h2 id=\"1-2-编写Makefile\"><a href=\"#1-2-编写Makefile\" class=\"headerlink\" title=\"1.2.编写Makefile\"></a>1.2.编写Makefile</h2><ul>\n<li>原来的 Makefile 是这样的：  <img src=\"/post/Linux/All%20Makefile/%E6%80%BB%E5%B7%A5%E7%A8%8B/Makefile%20%E7%BC%96%E8%AF%91%E5%B7%A5%E7%A8%8B/Untitled%201.png\" alt=\"Untitled\"></li>\n</ul>\n<p>可以看出来，这些都是基于所有文件在同一个目录才可以这么写，要是分类放到了下级目录，就不可以这么写了。</p>\n<ol>\n<li>目标：让 make 自动遍历自定义目录并把编译出文件放进同一个目录下。<br>&nbsp;</li>\n<li>思路：<ul>\n<li>可以看到编译目标是依赖于各个<code>.o</code>文件的，只要有个通用的模板把所有.<code>o</code>文件遍历出来就可以了。<br>  &nbsp;</li>\n<li>于是可以先使用<code>foreach</code>函数，把需要的目录下的<code>.c</code>文件遍历出来。<br>  &nbsp;</li>\n<li>因为使用<code>foreach</code>函数遍历的文件名都带有路径，所以要用<code>notdir</code>把路径去除。<br>  &nbsp;</li>\n<li>再使用<code>patsubst</code>函数把遍历的<code>.c</code>文件名（其实已经是字符）改成<code>.o</code>格式并存到自定义目录中。<br>  &nbsp;</li>\n<li>这样就是依赖<code>.o</code>文件的通用模板了：  <pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">Build_Dir&#x3D;build          #自定义编译文件存放目录\nSRC_Dir&#x3D;module1 module2  #.c文件所在目录\n\n#得到所有.c文件名\nSource_cpp&#x3D;$(foreach dir,$(SRC_Dir),$(wildcard $(dir)&#x2F;*.c))   \n#清除.c路径名以及改成.o格式\nOBJS&#x3D;$(patsubst %.c,$(Build_Dir)&#x2F;%.o,$(notdir $(Source_cpp))) </code></pre>\n  &nbsp;</li>\n<li>把生成执行文件目标和依赖换成上面的变量即可  <pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">$(Build_Dir)&#x2F;$(TARGET):$(OBJS)\n        $(CC) $^ -o $@</code></pre>\n  &nbsp;</li>\n<li>这时候还需要写生成<code>.o</code>文件的目标，不能再使用默认目标，因为已经不是同一个目录下了。<br>  &nbsp;</li>\n<li>之前生成<code>.o</code>目标依赖于<code>.c</code>文件，现在要加上创建一个<code>build</code>目录存放<code>.o</code>文件。<ul>\n<li>可以这样修改：  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#目标多加路径，指定.o生成目录；依赖添加了创建目录操作\n$(Build_Dir)&#x2F;%.o:%.c | create_build\n        $(CC) -c $&lt; -o $@\n\ncreate_build:\n        mkdir -p $(Build_Dir)</code></pre>\n&nbsp;</li>\n</ul>\n</li>\n<li>注意：需要添加<code>VPATH</code>环境变量，指定<code>.c</code>文件目录即可<ul>\n<li>没有添加环境变量报错：<br>  <img src=\"/post/Linux/All%20Makefile/%E6%80%BB%E5%B7%A5%E7%A8%8B/Makefile%20%E7%BC%96%E8%AF%91%E5%B7%A5%E7%A8%8B/Untitled%202.png\" alt=\"Untitled\"><br>&nbsp;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>完整 Makefile</li>\n</ol>\n<details class=\"custom-details\">\n<summary>以下是总代码：</summary>\n<p><pre><code><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Build_Dir&#x3D;build\nSRC_Dir&#x3D;module1 module2   #为 .c 文件所在目录\n    \nSource_cpp&#x3D;$(foreach dir,$(SRC_Dir),$(wildcard $(dir)&#x2F;*.c))\nOBJS&#x3D;$(patsubst %.c,$(Build_Dir)&#x2F;%.o,$(notdir $(Source_cpp)))\nVPATH&#x3D;$(SRC_Dir)          #属于Makefile里环境变量，使用时需要指定文件的路径\n    \nTARGET&#x3D;mp3\n#OBJS&#x3D;mp3.o main.o\n\n$(Build_Dir)&#x2F;$(TARGET):$(OBJS)\n        $(CC) $^ -o $@\n    \n$(Build_Dir)&#x2F;%.o:%.c | create_build\n        $(CC) -c $&lt; -o $@\n\n.PHONY:clean create_build\n\nclean:\n        rm -r $(Build_Dir)\n\ncreate_build:\n        mkdir -p $(Build_Dir)</code></pre>\n</code></pre>\n</p>\n</details>\n<h1 id=\"2-解决头文件依赖\"><a href=\"#2-解决头文件依赖\" class=\"headerlink\" title=\"2.解决头文件依赖\"></a><strong>2.解决头文件依赖</strong></h1><ul>\n<li>之前一直都会报一个警告，就是缺少函数的声明  <img src=\"/post/Linux/All%20Makefile/%E6%80%BB%E5%B7%A5%E7%A8%8B/Makefile%20%E7%BC%96%E8%AF%91%E5%B7%A5%E7%A8%8B/Untitled%203.png\" alt=\"Untitled\"></li>\n</ul>\n<p>而解决这个问题的办法就是加入头文件，在头文件中声明函数，并一起编译。</p>\n<ol>\n<li>添加一个<code>include</code>目录专门存放头文件，新建一个<code>mp3.h</code>头文件。<br> <img src=\"/post/Linux/All%20Makefile/%E6%80%BB%E5%B7%A5%E7%A8%8B/Makefile%20%E7%BC%96%E8%AF%91%E5%B7%A5%E7%A8%8B/Untitled%204.png\" alt=\"Untitled\"><br>&nbsp;</li>\n<li>编辑头文件，在里面添加函数的声明<ul>\n<li>以下是代码块  <pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#ifndef __MP3_\n#define __MP3_\n\nvoid play(void);\nvoid stop(void);\n\n#define song &quot;七里香&quot;\n#endif &#x2F;* __MP3_ *&#x2F;</code></pre>\n&nbsp;</li>\n</ul>\n</li>\n<li>在<code>mp3.c</code>和<code>main.c</code>里 include 头文件，并使用头文件宏<ul>\n<li>mp3.c：  <pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &quot;mp3.h&quot;\n#include &lt;stdio.h&gt;\n\nvoid play(void)\n&#123;\n    printf(&quot;Play &lt;%s&gt;！\\n&quot;, song);\n&#125;\n\nvoid stop(void)\n&#123;\n    printf(&quot;Stop music！\\n&quot;);\n    printf(&quot;Ohno\\n&quot;);\n&#125;</code></pre></li>\n<li>main.c：  <pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &quot;mp3.h&quot;\n#include &lt;stdio.h&gt;\n\nint main(void)\n&#123;\n    play();\n    printf(&quot;Ohye\\n&quot;);\n    stop();\n    return 0;\n&#125;</code></pre>\n&nbsp;</li>\n</ul>\n</li>\n<li>修改 Makefile<ul>\n<li>添加头文件路径<br>&nbsp;</li>\n<li>用<code>foreach</code>头文件遍历出目录中的头文件，并添加到.o目标的依赖文件中<br>&nbsp;</li>\n<li>用<code>patsubst</code>更改头文件目录格式，在目录前添加<code>-I</code></li>\n</ul>\n</li>\n</ol>\n<details class=\"custom-details\">\n<summary>加入头文件版本：</summary>\n<p>    <pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">ARMH?&#x3D;x86\n\nifeq ($(ARMH),x86)\n        CC&#x3D;gcc\n        Build_Dir&#x3D;build_x86\nelse\n        CC&#x3D;arm-linux-gnueabihf-gcc\n        Build_Dir&#x3D;build_arm\nendif\n    \nSRC_Dir&#x3D;module1 module2\nINC_Dir&#x3D;include  #新添加：头文件目录\nInclude&#x3D;$(patsubst %,-I%,$(INC_Dir)) #新添加：更改头文件目录格式\n\nSource_hpp&#x3D;$(foreach dir,$(INC_Dir),$(wildcard $(dir)&#x2F;*.h)) #新添加：遍历.h文件\nSource_cpp&#x3D;$(foreach dir,$(SRC_Dir),$(wildcard $(dir)&#x2F;*.c))\nOBJS&#x3D;$(patsubst %.c,$(Build_Dir)&#x2F;%.o,$(notdir $(Source_cpp)))\nVPATH&#x3D;$(SRC_Dir)\n    \nTARGET&#x3D;mp3\n#OBJS&#x3D;mp3.o main.o\n    \n$(Build_Dir)&#x2F;$(TARGET):$(OBJS)\n        $(CC) $^ -o $@\n    \n$(Build_Dir)&#x2F;%.o:%.c $(Source_hpp)| create_build  #新添加：依赖.h文件\n        $(CC) -c $&lt; -o $@ $(Include)   #新添加：头文件目录\n    \n.PHONY:clean create_build\n\nclean:\n        rm -r $(Build_Dir)\n\ncreate_build:\n        mkdir -p $(Build_Dir)</code></pre></p>\n</details>\n<h1 id=\"3-自行尝试\"><a href=\"#3-自行尝试\" class=\"headerlink\" title=\"3.自行尝试\"></a><strong>3.自行尝试</strong></h1><ul>\n<li>按照我之前代码工程，同类型的<code>.c</code>文件和<code>.h</code>文件都放在同一个目录中。<br>  <img src=\"/post/Linux/All%20Makefile/%E6%80%BB%E5%B7%A5%E7%A8%8B/Makefile%20%E7%BC%96%E8%AF%91%E5%B7%A5%E7%A8%8B/Untitled%205.png\" alt=\"Untitled\"><br>&nbsp;</li>\n<li>接下来修改 Makefile</li>\n</ul>\n<details class=\"custom-details\">\n<summary>总工程</summary>\n<p><pre><code><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">ARMH?&#x3D;x86\n\nifeq ($(ARMH),x86)\n        CC&#x3D;gcc\n        Build_Dir&#x3D;build_x86\nelse\n        CC&#x3D;arm-linux-gnueabihf-gcc\n        Build_Dir&#x3D;build_arm\nendif\n\nSRC_Dir&#x3D;Devices USER\n#INC_Dir&#x3D;include\nInclude&#x3D;$(patsubst %,-I%,$(SRC_Dir))\n\nSource_cpp&#x3D;$(foreach dir,$(SRC_Dir),$(wildcard $(dir)&#x2F;*.c))\nSource_hpp&#x3D;$(foreach dir,$(SRC_Dir),$(wildcard $(dir)&#x2F;*.h))\ntouwenjian&#x3D;$(notdir $(Source_hpp))\n\nOBJS&#x3D;$(patsubst %.c,$(Build_Dir)&#x2F;%.o,$(notdir $(Source_cpp)))\nVPATH&#x3D;$(SRC_Dir)\n\nTARGET&#x3D;mp3\n#OBJS&#x3D;mp3.o main.o\n\n$(Build_Dir)&#x2F;$(TARGET):$(OBJS)\n        $(CC) $^ -o $@\n\n$(Build_Dir)&#x2F;%.o:%.c $(touwenjian)| create_build\n        $(CC) -c $&lt; -o $@ $(Include)\n\n.PHONY:clean create_build\n\nclean:\n        rm -r $(Build_Dir)\n\ncreate_build:\n        mkdir -p $(Build_Dir)</code></pre>\n</code></pre>\n</p>\n</details>\n","text":"1.编译初级工程一般工程，会把文件按类别分文件夹存放。可以把生成的文件也用一个文件夹存起来，编译文件在提交或者备份都是不需要的，可以删除。 按照这种思路，结合之前学习的知识，对之前main.c和mp3.c工程进行修改。 1.1.把文件归档 首先创建module1和module2两...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"Linux","slug":"Linux","count":16,"path":"api/categories/Linux.json"}],"tags":[{"name":"Makefile","slug":"Makefile","count":7,"path":"api/tags/Makefile.json"},{"name":"编译","slug":"编译","count":7,"path":"api/tags/编译.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E7%BC%96%E8%AF%91%E5%88%9D%E7%BA%A7%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">1.编译初级工程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E6%8A%8A%E6%96%87%E4%BB%B6%E5%BD%92%E6%A1%A3\"><span class=\"toc-text\">1.1.把文件归档</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E7%BC%96%E5%86%99Makefile\"><span class=\"toc-text\">1.2.编写Makefile</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E8%A7%A3%E5%86%B3%E5%A4%B4%E6%96%87%E4%BB%B6%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">2.解决头文件依赖</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E8%87%AA%E8%A1%8C%E5%B0%9D%E8%AF%95\"><span class=\"toc-text\">3.自行尝试</span></a></li></ol>","author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Makefile 变量与规则","uid":"41b42fc7bcab237c7248d722942ebc82","slug":"Linux/All Makefile/变量与规则/Makefile 变量与规则","date":"2022-02-05T12:49:36.000Z","updated":"2022-02-20T12:58:29.916Z","comments":true,"path":"api/articles/Linux/All Makefile/变量与规则/Makefile 变量与规则.json","keywords":null,"cover":"https://s2.loli.net/2022/02/16/r9iyqpH1Y734duO.jpg","text":"1.系统变量 例如：CC，AS，MAKE 是属于系统变量，代码如下 注意：与 Shell 引用不同Makefile： $(xx)Shell：${xx} 2.自定义变量2.1.延迟赋值延迟赋值：= 变量B 看上去是在变量A 第一次赋值之后，但是实际上是当变量B 被调用的时候，才会执...","link":"","photos":[],"count_time":{"symbolsCount":859,"symbolsTime":"1 mins."},"categories":[{"name":"Linux","slug":"Linux","count":16,"path":"api/categories/Linux.json"}],"tags":[{"name":"Makefile","slug":"Makefile","count":7,"path":"api/tags/Makefile.json"},{"name":"编译","slug":"编译","count":7,"path":"api/tags/编译.json"}],"author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"安装 Ubuntu 系统","uid":"9abc5569b0fad9372ca1882359d96139","slug":"Linux/Ubuntu 系统/安装 Ubuntu 系统","date":"2022-02-04T12:49:36.000Z","updated":"2022-02-11T15:03:01.683Z","comments":true,"path":"api/articles/Linux/Ubuntu 系统/安装 Ubuntu 系统.json","keywords":null,"cover":"https://s2.loli.net/2022/02/11/C8gx7cZYOmUfraK.jpg","text":"1.虚拟机1.1.安装虚拟机下载了 .exe 后，双击一直点 next 即可（路径可以自行修改） 1.2.配置虚拟机1.2.1.全局路径 点击全局设定，可以修改存放路径。 1.2.2.新建环境 名称和类型 内存 虚拟硬盘 创建后让你选择类型 之后选择分配方式 最后设置极限大小 1...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Linux","slug":"Linux","count":16,"path":"api/categories/Linux.json"}],"tags":[{"name":"嵌入式Linux","slug":"嵌入式Linux","count":9,"path":"api/tags/嵌入式Linux.json"}],"author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}