{"title":"串级PID","uid":"8de0106768811cd9002fc07312c3d77b","slug":"Algorithm/All_PID/PID","date":"2022-02-10T12:49:36.000Z","updated":"2022-02-11T15:03:01.669Z","comments":true,"path":"api/articles/Algorithm/All_PID/PID.json","keywords":null,"cover":"https://s2.loli.net/2022/02/11/uNmx6PrZQlEXpzf.png","content":"<h1 id=\"1-云台PID的调试方法\"><a href=\"#1-云台PID的调试方法\" class=\"headerlink\" title=\"1.云台PID的调试方法\"></a><strong>1.云台PID的调试方法</strong></h1><h2 id=\"1-1-以前的PID调试方法\"><a href=\"#1-1-以前的PID调试方法\" class=\"headerlink\" title=\"1.1.以前的PID调试方法\"></a>1.1.以前的PID调试方法</h2><p>  我们上一年的师兄给出的调参方法是有问题的，按照PID原理来说，应该是 Kp+Ki 控制，Kd是可以抑制震荡，但是也会拖慢系统响应，而且过大的Kd会导致电机在正常运动时会出现抖动现象。但是之前他们为什么要 Kp+Kd 控制，我猜测可能是因为当时都是用彬哥制造的陀螺仪，而彬哥制造的陀螺仪由于实时性很差，接收周期大概在 14ms 左右，只有不到 100HZ 的响应时间，按照正常来说，云台陀螺仪至少要有 500HZ 以上（也就是 2ms 以上）才能调，但是他们就是由于实时性太低，所以正统的调参方式并没有太大效果，而且由于实时性太低，要是不给前馈补偿，是无法调到像华工等学校这么“硬”。</p>\n<h2 id=\"1-2-现在的调试方法\"><a href=\"#1-2-现在的调试方法\" class=\"headerlink\" title=\"1.2.现在的调试方法\"></a>1.2.现在的调试方法</h2><p>  目前使用的陀螺仪是大疆 A 板的板载陀螺仪，使用 SPI 通讯，1ms读取信息。调试方法使用华工交流回来的办法。大概思路是先把内环的 Kp和Ki 先确定，积分分离和积分阈值也要确定好，之后外环就可以随便给。</p>\n<p>具体方法：</p>\n<ul>\n<li>先确定外环的限幅值，用一个位置单环，随便给一个 Kp ，把陀螺仪速度值作为测量值，目标值自行定义，看目标值到哪里的时候云台转动的速度合理（目测），就把这个目标值作为外环输出限幅。</li>\n<li>然后换回双环，首先开始调试内环，给 Kp 和 Ki，然后目标值是给阶跃形式，用上位机看内环的目标值和测量值，<strong>理想状态是在外环输出值（内环目标值）缓慢往下降的时候，内环的测量值要贴紧内环目标值，到末端的时候一定不能抖，而且都要一直贴紧。</strong>至于峰值之前的就不用在意，只需要看峰值与峰值之后的曲线即可</li>\n<li>这是调试使用彬哥陀螺仪作为云台角度时的例子：<h3 id=\"第一阶段：只给不大的-Kp\"><a href=\"#第一阶段：只给不大的-Kp\" class=\"headerlink\" title=\"第一阶段：只给不大的 Kp\"></a>第一阶段：只给不大的 Kp</h3>  <img src=\"/post/Algorithm/All_PID/PID/Untitled.png\" alt=\"Untitled.png\">  其中黄色的是内环输入值，蓝色的是内环的输出值。可以看到现在的内环参数是不可以的，首先：<ul>\n<li><strong>A段</strong>：输出峰值没有达到与输入峰值一致</li>\n<li><strong>B段</strong>：输入往下降时输出没有与其“贴紧”</li>\n<li>C段：这里是判断内环参数是否合理最重要的地方，既没有贴紧，也出现了抖动现象</li>\n</ul>\n  遇到这种情况我们一般可以把内环 Kp 增大。<h3 id=\"第二阶段：把-Kp-给大\"><a href=\"#第二阶段：把-Kp-给大\" class=\"headerlink\" title=\"第二阶段：把 Kp 给大\"></a>第二阶段：把 Kp 给大</h3>  <img src=\"/post/Algorithm/All_PID/PID/Untitled%201.png\" alt=\"Untitled%201.png\">  其中黄色的是内环输入值，蓝色的是内环的输出值。可以看到现在的内环参数也是不可以的：<ul>\n<li>A段：输出峰值超过了输入峰值</li>\n<li>B段：输入往下降时输出没有与其“贴紧”，而且还有震荡</li>\n<li>C段：同上</li>\n</ul>\n  可以看出，实时性不高的话不加任何的前馈是没法做到精准的。<h3 id=\"第三阶段：加入-Ki\"><a href=\"#第三阶段：加入-Ki\" class=\"headerlink\" title=\"第三阶段：加入 Ki\"></a>第三阶段：加入 Ki</h3>  <img src=\"/post/Algorithm/All_PID/PID/Untitled%202.png\" alt=\"Untitled%202.png\">  加入 Ki 后，会使得输出峰值贴紧输入峰值（绿色圈处），但是太大也会引起抖动，对于实时性高的外设，Kp 给大了峰值也不会超调，只会抖动；<br>  要是 Kp 作用下不抖动，这个时候可以加入 Ki，把峰值积上去。Ki 积分分离阈值可以根据 Kp 作用开始减弱的附近作为限幅值。<h3 id=\"第四阶段：确定-Ki-限幅值\"><a href=\"#第四阶段：确定-Ki-限幅值\" class=\"headerlink\" title=\"第四阶段：确定 Ki 限幅值\"></a>第四阶段：确定 Ki 限幅值</h3>  加入 Ki 后，可能会出现只加一点点，但是却出现曲线开始出现抖动，这个时候就可以开始适当把 Ki 限幅降低（限幅一开始可以给很大），然后 Ki 再给大，一点点尝试，直到两边达到一个合适值。待两条曲线峰值和峰值后完全贴合不抖动，内环基本就完成了，这个时候外环可以随意加。</li>\n</ul>\n<h2 id=\"1-3-PID参数极限调法\"><a href=\"#1-3-PID参数极限调法\" class=\"headerlink\" title=\"1.3.PID参数极限调法\"></a>1.3.PID参数极限调法</h2><h3 id=\"1-3-1-外环加上-Kd\"><a href=\"#1-3-1-外环加上-Kd\" class=\"headerlink\" title=\"1.3.1.外环加上 Kd\"></a>1.3.1.外环加上 Kd</h3><p>上诉的方法只在内环进行 PI 控制，外环进行 P 控制，但是有时调到不抖且响应快的时候，阻尼感并不会很强烈。但这个时候其实系统并不是最极限的状态，要是对此不满意，还能在此基础上再往极限方向发展。可以在外环上加上 Kd 控制。</p>\n<p>但是加上 Kd 控制会出现一个问题，加大了云台会开始抖，但是给小了对效果还是不满意，那么就要进行滤波操作了。</p>\n<h3 id=\"1-3-2-对输入或输出滤波\"><a href=\"#1-3-2-对输入或输出滤波\" class=\"headerlink\" title=\"1.3.2.对输入或输出滤波\"></a>1.3.2.对输入或输出滤波</h3><ol>\n<li>对输入误差进行滤波 对传入 PID 的数据进行滤波，低通或者一阶卡尔曼等都可以。</li>\n<li>对外环 Kd 进行滤波 系统是由于我们加入 Kd 才会出现抖动，那么我们也可以用滤波去消除低频抖动。也是可以使用低通或一阶卡尔曼滤波器进行滤波，但是我尝试后觉得一阶卡尔曼的滤波效果要比低通更好，这个可以看本身现象调整。滤波的对象就是 Kd 算出的结果——d_out。 <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">pid_t-&gt;d_out &#x3D; pid_t-&gt;Kd * (pid_t-&gt;err - pid_t-&gt;err_last);      &#x2F;&#x2F;得到 Kd 输出值\npid_t-&gt;d_out &#x3D; KalmanFilter(&amp;Cloud_YAWODKalman, pid_t-&gt;d_out);  &#x2F;&#x2F;一阶卡尔曼滤波</code></pre>\n 滤掉低频抖动后，Kd 的参数还能继续给大，但总会有一个极限，实在到了极限也就没办法了。</li>\n</ol>\n<h1 id=\"2-底盘跟随PID的调试方法\"><a href=\"#2-底盘跟随PID的调试方法\" class=\"headerlink\" title=\"2.底盘跟随PID的调试方法\"></a><strong>2.底盘跟随PID的调试方法</strong></h1><p>单纯单环位置式PID在云台摆动大角度时底盘会出现超调现象，一个是与地面摩擦力和机械结构有关，还有一个是与功率有关。</p>\n<p>实验室楼下场地地胶本来比较滑，加上功率限制，导致底盘在大幅度自旋的时候停下时无法提供比较大的反向电流，底盘就会超调。</p>\n<p><img src=\"/post/Algorithm/All_PID/PID/Untitled%203.png\" alt=\"Untitled%203.png\"></p>\n<p>绿色是目标值，蓝色是测量值，可以看到PID已经无法修正运动了，因为功率被限制住了。</p>\n<h2 id=\"2-1-双环PID控制\"><a href=\"#2-1-双环PID控制\" class=\"headerlink\" title=\"2.1.双环PID控制\"></a>2.1.双环PID控制</h2><p>用两个位置式PID计算底盘跟随，外环是用电机的角度，内环是用电机的速度（或者陀螺仪的速度）。</p>\n<h2 id=\"2-2-单环分段PID控制\"><a href=\"#2-2-单环分段PID控制\" class=\"headerlink\" title=\"2.2.单环分段PID控制\"></a>2.2.单环分段PID控制</h2><h3 id=\"2-2-1-没有直走平移时参数\"><a href=\"#2-2-1-没有直走平移时参数\" class=\"headerlink\" title=\"2.2.1. 没有直走平移时参数\"></a>2.2.1. 没有直走平移时参数</h3><p>云台角度过大的时候 Kp 减少，防止瞬间速度过大导致功率不够底盘超调。云台角度很小时要把 Kp 拉大，不然正常运动时跟随会变慢。</p>\n<hr>\n<p>最小和最大 Kp 可以通过以下方法确定：</p>\n<ul>\n<li>先使用普通单环给 Kp，然后云台快速大幅度摆动，底盘不超调就是 Kp 最小阈值。</li>\n<li>同上操作，然后云台快速小幅度摆动，觉得底盘能跟得快就是 Kp 最大阈值。</li>\n</ul>\n<hr>\n<p>最小和最大角度可以通过以下方法确定：</p>\n<ul>\n<li>通过上述大幅度摆动，云台只要超过某个值，该超调还是会超调，最大角度一般为转到屁股附近就差不多了。</li>\n<li>最小角度是云台大概是正常走路需要转弯的小幅度角度即可。</li>\n</ul>\n<hr>\n<p>只有最大最小也不够，中间还需要添加一点阈值来使其平滑，中间的阈值可以自行尝试。</p>\n<h3 id=\"2-2-2-有直走平移时参数\"><a href=\"#2-2-2-有直走平移时参数\" class=\"headerlink\" title=\"2.2.2.有直走平移时参数\"></a>2.2.2.有直走平移时参数</h3><p>在上述调好参数后，判断直走速度，速度越大，跟随的 Kp 越小，可以直接乘系数调节。</p>\n","text":"1.云台PID的调试方法1.1.以前的PID调试方法 我们上一年的师兄给出的调参方法是有问题的，按照PID原理来说，应该是 Kp+Ki 控制，Kd是可以抑制震荡，但是也会拖慢系统响应，而且过大的Kd会导致电机在正常运动时会出现抖动现象。但是之前他们为什么要 Kp+Kd 控制，我猜...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":1,"path":"api/categories/算法.json"}],"tags":[{"name":"PID","slug":"PID","count":1,"path":"api/tags/PID.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E4%BA%91%E5%8F%B0PID%E7%9A%84%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.云台PID的调试方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E4%BB%A5%E5%89%8D%E7%9A%84PID%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.1.以前的PID调试方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E7%8E%B0%E5%9C%A8%E7%9A%84%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.2.现在的调试方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E5%8F%AA%E7%BB%99%E4%B8%8D%E5%A4%A7%E7%9A%84-Kp\"><span class=\"toc-text\">第一阶段：只给不大的 Kp</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%EF%BC%9A%E6%8A%8A-Kp-%E7%BB%99%E5%A4%A7\"><span class=\"toc-text\">第二阶段：把 Kp 给大</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%EF%BC%9A%E5%8A%A0%E5%85%A5-Ki\"><span class=\"toc-text\">第三阶段：加入 Ki</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%A1%AE%E5%AE%9A-Ki-%E9%99%90%E5%B9%85%E5%80%BC\"><span class=\"toc-text\">第四阶段：确定 Ki 限幅值</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-PID%E5%8F%82%E6%95%B0%E6%9E%81%E9%99%90%E8%B0%83%E6%B3%95\"><span class=\"toc-text\">1.3.PID参数极限调法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-1-%E5%A4%96%E7%8E%AF%E5%8A%A0%E4%B8%8A-Kd\"><span class=\"toc-text\">1.3.1.外环加上 Kd</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-2-%E5%AF%B9%E8%BE%93%E5%85%A5%E6%88%96%E8%BE%93%E5%87%BA%E6%BB%A4%E6%B3%A2\"><span class=\"toc-text\">1.3.2.对输入或输出滤波</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%BA%95%E7%9B%98%E8%B7%9F%E9%9A%8FPID%E7%9A%84%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.底盘跟随PID的调试方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%8F%8C%E7%8E%AFPID%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">2.1.双环PID控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E5%8D%95%E7%8E%AF%E5%88%86%E6%AE%B5PID%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">2.2.单环分段PID控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-1-%E6%B2%A1%E6%9C%89%E7%9B%B4%E8%B5%B0%E5%B9%B3%E7%A7%BB%E6%97%B6%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">2.2.1. 没有直走平移时参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-2-%E6%9C%89%E7%9B%B4%E8%B5%B0%E5%B9%B3%E7%A7%BB%E6%97%B6%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">2.2.2.有直走平移时参数</span></a></li></ol></li></ol></li></ol>","author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"HAL-cubeMX 序章","uid":"02a3b3fcb111561eec2596647d9ebddc","slug":"cubeMX/cubeMX序章","date":"2022-01-27T12:49:36.000Z","updated":"2022-02-08T15:35:50.168Z","comments":true,"path":"api/articles/cubeMX/cubeMX序章.json","keywords":null,"cover":"https://s2.loli.net/2022/01/27/jLlCczwMViQ3d8T.jpg","text":"1.HAL库的某些学前概念HAL库对于刚刚接触的新人来说，确实不太友好，毕竟你已经看惯了标准库，然后突然间让你改掉你标准库的配置环境，重组一个环境之后再给你进行配置，难免会有一些不习惯。我刚开始接触的时候也是各种不习惯，然后越用越香（不是）。 总之，HAL库和标准库有着本质上的不...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Embedded","slug":"Embedded","count":19,"path":"api/categories/Embedded.json"}],"tags":[{"name":"HAL","slug":"HAL","count":14,"path":"api/tags/HAL.json"},{"name":"cubeMX","slug":"cubeMX","count":18,"path":"api/tags/cubeMX.json"}],"author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Makefile 序章","uid":"4f50b42c4f4b95dc4028325c472c0eea","slug":"Linux/All Makefile/Makefile 序章","date":"2022-02-05T12:49:36.000Z","updated":"2022-02-20T12:58:29.910Z","comments":true,"path":"api/articles/Linux/All Makefile/Makefile 序章.json","keywords":null,"cover":"https://s2.loli.net/2022/02/16/9BwocvuJ62WhIb8.jpg","text":"1. Makefile 简介在Linux开发环境下， 我们并没有太多的集成开发环境IDE，也就是说程序的所有控制权全部在于开发者，你势必要对底层软件的编译、链接、 装载有着相当深入的了解，才能说真正地驾驭了你的程序。 2. 学习目录 Makefile 三要素 引用 Makefil...","link":"","photos":[],"count_time":{"symbolsCount":200,"symbolsTime":"1 mins."},"categories":[{"name":"Linux","slug":"Linux","count":16,"path":"api/categories/Linux.json"}],"tags":[{"name":"Makefile","slug":"Makefile","count":7,"path":"api/tags/Makefile.json"},{"name":"编译","slug":"编译","count":7,"path":"api/tags/编译.json"}],"author":{"name":"Miraggio","slug":"blog-author","avatar":"https://s2.loli.net/2022/01/23/kntF9TEBOyHquwV.png","link":"https://lapzjfit.site","description":"喜欢研究奇奇怪怪的技术&游戏宅","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}